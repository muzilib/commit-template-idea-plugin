package com.c301.plugin.setting;

import com.c301.plugin.model.ChangeTypeDomain;
import com.c301.plugin.model.ChangeTypeEnum;
import com.c301.plugin.setting.render.CommitTypeTable;
import com.c301.plugin.utils.CommUtil;
import com.c301.plugin.utils.StrUtil;
import com.intellij.openapi.wm.WindowManager;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Arrays;

/**
 * 编辑commitType 对话框
 *
 * @Title EditCommitType
 * @ClassName com.c301.plugin.setting.EditCommitType
 * @Author Chenbing
 * @Date 25/03/05 11:55
 * @Version 1.0
 **/
public class EditCommitTypeDialog extends JDialog {

    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JComboBox<String> inputType;
    private JTextArea inputDescribe;
    private JLabel labelDescribe;
    private JLabel labelName;


    public EditCommitTypeDialog(ChangeTypeDomain data) {
        setContentPane(contentPane);
        getRootPane().setDefaultButton(buttonOK);
        setPreferredSize(new Dimension(400, 220));
        setMinimumSize(new Dimension(400, 220));
        pack();
        setModal(true);

        //设置显示信息
        var resourceBundle = CommUtil.i18nResourceBundle(null);
        buttonOK.setText(resourceBundle.getString("plugin.button.ok"));
        buttonCancel.setText(resourceBundle.getString("plugin.button.cancel"));
        if (data == null) {
            setTitle(resourceBundle.getString("plugin.setting.dialog.title.add"));
            inputType.addItem("");
        } else {
            setTitle(resourceBundle.getString("plugin.setting.dialog.title.edit"));
            inputType.addItem(data.getName());
            inputType.setSelectedItem(data.getName());
            inputDescribe.setText(data.getDirection());
        }

        //添加默认类型列表
        for (var type : ChangeTypeEnum.values()) inputType.addItem(type.getCode());
        inputType.addActionListener(e -> {
            var itemObject = inputType.getSelectedItem();
            if (itemObject != null) {
                inputDescribe.setText("");

                Arrays.stream(ChangeTypeEnum.values())
                        .filter(item -> item.getCode().equals(itemObject.toString()))
                        .findFirst().
                        ifPresent(item -> inputDescribe.setText(resourceBundle.getString("plugin.radio." + item.getCode())));
            }
        });

        //设置窗口打开位置为屏幕中心
        setLocationRelativeTo(null);
        var parentWindow = WindowManager.getInstance().getMostRecentFocusedWindow();
        if (parentWindow != null) setLocationRelativeTo(parentWindow);

        buttonOK.addActionListener(e -> onOK());
        buttonCancel.addActionListener(e -> onCancel());
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });
    }

    /**
     * 点击确定按钮
     */
    private void onOK() {
        var typeOption = inputType.getSelectedItem();
        if (typeOption == null || StrUtil.isBlank(typeOption.toString())) {
            JOptionPane.showMessageDialog(this, "请输入/选择类型名称", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (StrUtil.isBlank(inputDescribe.getText())) {
            JOptionPane.showMessageDialog(this, "请输入类型描述", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }

        var domain = new ChangeTypeDomain();
        domain.setName(typeOption.toString());
        domain.setDirection(inputDescribe.getText());
        CommitTypeTable.handleCommitTypeDataEvent(domain);
        onCancel();
    }

    /**
     * 点击取消
     */
    private void onCancel() {
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelName = new JLabel();
        Font labelNameFont = UIManager.getFont("Label.font");
        if (labelNameFont != null) labelName.setFont(labelNameFont);
        labelName.setText("类型名称");
        panel3.add(labelName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        inputType = new JComboBox();
        inputType.setEditable(true);
        Font inputTypeFont = UIManager.getFont("Label.font");
        if (inputTypeFont != null) inputType.setFont(inputTypeFont);
        panel3.add(inputType, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelDescribe = new JLabel();
        Font labelDescribeFont = UIManager.getFont("Label.font");
        if (labelDescribeFont != null) labelDescribe.setFont(labelDescribeFont);
        labelDescribe.setText("类型描述");
        panel3.add(labelDescribe, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(1, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        inputDescribe = new JTextArea();
        Font inputDescribeFont = UIManager.getFont("Label.font");
        if (inputDescribeFont != null) inputDescribe.setFont(inputDescribeFont);
        scrollPane1.setViewportView(inputDescribe);
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
